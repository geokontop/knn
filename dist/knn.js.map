{"version":3,"sources":["../knn/knn.js"],"names":["path","require","fs","readline","knn","baseDir","join","__dirname","csvtojsonDatasets","filename","limit","callback","trainDataset","testDataset","rl","createInterface","input","createReadStream","crlfDelay","Infinity","i","labels","jsonArr","on","line","split","item","temp","val","Math","random","push","getNeighbors","dataSet","testInstance","fields","k","distances","x","dist","euclideanDistance","distListed","sort","a","b","classify","slice","data1","data2","distance","field","pow","sqrt","neighbors","classVotes","neighbor","type","sortable","getAccuracy","testSet","fieldsTest","fieldType","correct","wrong","res"],"mappings":"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","file":"knn.js","sourcesContent":["/*\r\n * Getting the data from a csv file, forming datasets, evaluating distances\r\n * \r\n */\r\n\r\n // Dependencies\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nconst readline = require('readline');\r\n\r\n // Container\r\n const knn = {};\r\n\r\n // Base directory of the csv folder\r\nknn.baseDir = path.join(__dirname,'/../.data/');\r\n\r\n// Read csv\r\nknn.csvtojsonDatasets=(filename, limit, callback)=>{\r\n    const trainDataset = [];\r\n    const testDataset = [];\r\n\r\n    const rl = readline.createInterface({\r\n        input: fs.createReadStream(knn.baseDir+filename),\r\n        crlfDelay: Infinity\r\n    });\r\n    let i=0;\r\n    let labels={};\r\n    const jsonArr=[];\r\n    \r\n    rl.on('line', (line) => {\r\n        if(i === 0){\r\n            labels = line.split(',');\r\n        }else{\r\n            item = line.split(',');\r\n            const temp = {};\r\n            for(let val in labels){\r\n                temp[labels[val]] = item[val];\r\n            }\r\n            if(Math.random()<limit){\r\n                trainDataset.push(temp);\r\n            }else{\r\n                testDataset.push(temp);\r\n            }\r\n            jsonArr.push(temp);\r\n        }\r\n        i++;\r\n    }).on('close',()=>{\r\n        callback(labels, trainDataset, testDataset);\r\n    });\r\n}\r\n\r\n// Get k neighbors in the training sample\r\nknn.getNeighbors = (dataSet, testInstance, fields, k, callback)=>{\r\n    distances = []\r\n    // length =\r\n    for(let x in dataSet){\r\n        dist = knn.euclideanDistance(testInstance, dataSet[x], fields);\r\n        distances.push({dataSet:dataSet[x], dist: dist})        \r\n    }\r\n    const distListed = distances.sort(function(a, b) {\r\n        return a.dist - b.dist;\r\n    });\r\n    \r\n    callback(knn.classify(distListed.slice(0,3)));\r\n    \r\n}\r\n\r\n// Evaluate Euclidean distance\r\nknn.euclideanDistance=(data1, data2, fields)=>{\r\n    distance = 0;\r\n    for(let field of fields){\r\n        distance += Math.pow((data1[field]-data2[field]),2);\r\n    }\r\n    return Math.sqrt(distance);\r\n}\r\n\r\nknn.classify=(neighbors)=>{\r\n    classVotes = {};\r\n    for(let neighbor of neighbors){\r\n        if(classVotes[neighbor.dataSet.type]){\r\n            classVotes[neighbor.dataSet.type] += 1;\r\n        }else{\r\n            classVotes[neighbor.dataSet.type] = 1;\r\n        }\r\n    }\r\n    const sortable = [];\r\n    for (var type in classVotes) {\r\n        sortable.push([type, classVotes[type]]);\r\n    }\r\n\r\n    sortable.sort(function(a, b) {\r\n        return a[1] - b[1];\r\n    });\r\n\r\n    return sortable[0][0];\r\n}\r\n\r\nknn.getAccuracy=(dataSet, testSet, fieldsTest, k, fieldType, callback)=>{\r\n    correct = 0;\r\n    wrong =0;\r\n    // console.log(testSet)\r\n    for(let testInstance of testSet){\r\n        knn.getNeighbors(dataSet, testInstance, fieldsTest, k, (res)=>{\r\n            if(res===testInstance[fieldType]){\r\n                correct += 1;\r\n            }else{\r\n                wrong += 1;\r\n            }\r\n        });\r\n\r\n    }\r\n    callback(100*correct/(correct+wrong))\r\n}\r\n\r\n\r\n// Export module\r\nexport default  knn;\r\n"]}